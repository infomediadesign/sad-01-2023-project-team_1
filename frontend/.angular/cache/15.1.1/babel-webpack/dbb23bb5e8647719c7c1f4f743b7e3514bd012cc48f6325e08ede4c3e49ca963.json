{"ast":null,"code":"import { catchError, empty, Observable, switchMap, tap, throwError, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class WebReqInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n    this.accessTokenRefreshed = new Subject();\n  }\n  intercept(request, next) {\n    // Handle the request\n    request = this.addAuthHeader(request);\n    // call next() and handle response\n    return next.handle(request).pipe(catchError(error => {\n      console.log(error);\n      if (error.status === 401) {\n        // 401 so we are unauthorized\n        // refresh access token\n        return this.refreshAccessToken().pipe(switchMap(() => {\n          request = this.addAuthHeader(request);\n          return next.handle(request);\n        }), catchError(err => {\n          console.log(err);\n          this.authService.logout();\n          return empty();\n        }));\n      }\n      return throwError(error);\n    }));\n  }\n  refreshAccessToken() {\n    if (this.refreshingAccessToken) {\n      return new Observable(observer => {\n        this.accessTokenRefreshed.subscribe(() => {\n          // this code will run when the access token has been refreshed\n          observer.next();\n          observer.complete();\n        });\n      });\n    } else {\n      this.refreshingAccessToken = true;\n      // we want to call a method in the auth service to send a request to refresh the access token\n      return this.authService.getNewAccessToken().pipe(tap(() => {\n        console.log(\"Access Token Refreshed!\");\n        this.refreshingAccessToken = false;\n        this.accessTokenRefreshed.next();\n      }));\n    }\n  }\n  addAuthHeader(request) {\n    // get access token\n    const token = this.authService.getAccessToken();\n    if (token) {\n      // append access token to req header\n      return request.clone({\n        setHeaders: {\n          'x-access-token': token\n        }\n      });\n    }\n    return request;\n  }\n}\nWebReqInterceptor.ɵfac = function WebReqInterceptor_Factory(t) {\n  return new (t || WebReqInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nWebReqInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebReqInterceptor,\n  factory: WebReqInterceptor.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,KAAK,EAAEC,UAAU,EAAEC,SAAS,EAAEC,GAAG,EAAEC,UAAU,EAAEC,OAAO,QAAQ,MAAM;;;AAQzF,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAG/B,yBAAoB,GAAiB,IAAIH,OAAO,EAAE;EAHF;EAKhDI,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD;IAEAD,OAAO,GAAG,IAAI,CAACE,aAAa,CAACF,OAAO,CAAC;IAErC;IACA,OAAOC,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC,CAACI,IAAI,CAC9Bf,UAAU,CAAEgB,KAAwB,IAAI;MACtCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAElB,IAAIA,KAAK,CAACG,MAAM,KAAK,GAAG,EAAC;QACvB;QAEA;QACA,OAAO,IAAI,CAACC,kBAAkB,EAAE,CAACL,IAAI,CACnCZ,SAAS,CAAC,MAAK;UACbQ,OAAO,GAAG,IAAI,CAACE,aAAa,CAACF,OAAO,CAAC;UACrC,OAAOC,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC;QAC7B,CAAC,CAAC,EACFX,UAAU,CAAEqB,GAAQ,IAAI;UACtBJ,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;UAChB,IAAI,CAACZ,WAAW,CAACa,MAAM,EAAE;UACzB,OAAOrB,KAAK,EAAE;QAChB,CAAC,CAAC,CACH;;MAEH,OAAOI,UAAU,CAACW,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAEFI,kBAAkB;IACd,IAAI,IAAI,CAACG,qBAAqB,EAAE;MAC9B,OAAO,IAAIrB,UAAU,CAACsB,QAAQ,IAAG;QAC/B,IAAI,CAACC,oBAAoB,CAACC,SAAS,CAAC,MAAK;UACvC;UACAF,QAAQ,CAACZ,IAAI,EAAE;UACfY,QAAQ,CAACG,QAAQ,EAAE;QACrB,CAAC,CAAC;MACJ,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACJ,qBAAqB,GAAG,IAAI;MACjC;MACA,OAAO,IAAI,CAACd,WAAW,CAACmB,iBAAiB,EAAE,CAACb,IAAI,CAC9CX,GAAG,CAAC,MAAK;QACTa,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QAChC,IAAI,CAACK,qBAAqB,GAAG,KAAK;QACtC,IAAI,CAACE,oBAAoB,CAACb,IAAI,EAAE;MAClC,CAAC,CAAC,CACH;;EAGL;EAEAC,aAAa,CAACF,OAAyB;IACrC;IACA,MAAMkB,KAAK,GAAG,IAAI,CAACpB,WAAW,CAACqB,cAAc,EAAE;IAE/C,IAAID,KAAK,EAAE;MACL;MACA,OAAOlB,OAAO,CAACoB,KAAK,CAAC;QACnBC,UAAU,EAAE;UACV,gBAAgB,EAAEH;;OAErB,CAAC;;IAER,OAAOlB,OAAO;EAEhB;;AA3EWJ,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAA0B,SAAjB1B,iBAAiB;EAAA2B,YAFhB;AAAM","names":["catchError","empty","Observable","switchMap","tap","throwError","Subject","WebReqInterceptor","constructor","authService","intercept","request","next","addAuthHeader","handle","pipe","error","console","log","status","refreshAccessToken","err","logout","refreshingAccessToken","observer","accessTokenRefreshed","subscribe","complete","getNewAccessToken","token","getAccessToken","clone","setHeaders","factory","providedIn"],"sourceRoot":"","sources":["E:\\srh\\SAD\\Project\\Task2\\sad-01-2023-project-team_1\\frontend\\src\\app\\web-req.interceptor.ts"],"sourcesContent":["import { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, empty, Observable, switchMap, tap, throwError, Subject } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebReqInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authService: AuthService) { }\r\n\r\n  refreshingAccessToken: boolean | undefined;\r\n  accessTokenRefreshed: Subject<any> = new Subject();\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<any> {\r\n    // Handle the request\r\n\r\n    request = this.addAuthHeader(request);\r\n\r\n    // call next() and handle response\r\n    return next.handle(request).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        console.log(error);\r\n\r\n        if (error.status === 401){\r\n          // 401 so we are unauthorized\r\n\r\n          // refresh access token\r\n          return this.refreshAccessToken().pipe(\r\n            switchMap(() => {\r\n              request = this.addAuthHeader(request);\r\n              return next.handle(request);\r\n            }),\r\n            catchError((err: any) => {\r\n              console.log(err);\r\n              this.authService.logout();\r\n              return empty();\r\n            })\r\n          )\r\n        }\r\n        return throwError(error);\r\n      })\r\n    )\r\n  }\r\n\r\nrefreshAccessToken() {\r\n    if (this.refreshingAccessToken) {\r\n      return new Observable(observer => {\r\n        this.accessTokenRefreshed.subscribe(() => {\r\n          // this code will run when the access token has been refreshed\r\n          observer.next();\r\n          observer.complete();\r\n        })\r\n      })\r\n    } else {\r\n      this.refreshingAccessToken = true;\r\n      // we want to call a method in the auth service to send a request to refresh the access token\r\n      return this.authService.getNewAccessToken().pipe(\r\n        tap(() => {\r\n        console.log(\"Access Token Refreshed!\");\r\n              this.refreshingAccessToken = false;\r\n          this.accessTokenRefreshed.next();\r\n        })\r\n      )\r\n    }\r\n    \r\n  }\r\n\r\n  addAuthHeader(request: HttpRequest<any>){\r\n    // get access token\r\n    const token = this.authService.getAccessToken();\r\n\r\n    if (token) {\r\n          // append access token to req header\r\n          return request.clone({\r\n            setHeaders: {\r\n              'x-access-token': token\r\n            }\r\n          })\r\n    }\r\n    return request;\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}