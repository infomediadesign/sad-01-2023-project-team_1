{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { shareReplay, tap } from 'rxjs/operators';\nlet AuthService = class AuthService {\n  constructor(webService, router, http, jwtHelper) {\n    this.webService = webService;\n    this.router = router;\n    this.http = http;\n    this.jwtHelper = jwtHelper;\n  }\n  login(email, password) {\n    return this.webService.login(email, password).pipe(shareReplay(), tap(res => {\n      // the auth tokens will be in the header of this response\n      this.setSession(email, res.body._id, res.headers.get('x-access-token'), res.headers.get('x-refresh-token'));\n      console.log(\"Logged in\");\n    }));\n  }\n  signup(email, password) {\n    return this.webService.signup(email, password).pipe(shareReplay(), tap(res => {\n      // the auth tokens will be in the header of this response\n      this.setSession(email, res.body._id, res.headers.get('x-access-token'), res.headers.get('x-refresh-token'));\n      console.log(\"Signed up\");\n    }));\n  }\n  changePw(email, password) {\n    let userId = this.getUserId();\n    return this.webService.changePw(email, password, userId).pipe(shareReplay(), tap(res => {\n      console.log(\"Password changed successfully\");\n    }));\n  }\n  logout() {\n    this.removeSession();\n    this.router.navigate(['/login']);\n  }\n  isLoggedIn() {\n    if (this.getAccessToken()) return true;else return false;\n  }\n  getAccessToken() {\n    return localStorage.getItem('x-access-token');\n  }\n  getRefreshToken() {\n    return localStorage.getItem('x-refresh-token');\n  }\n  getUserId() {\n    return localStorage.getItem('user-id');\n  }\n  getUserEmail() {\n    return localStorage.getItem('user-email');\n  }\n  setAccessToken(accessToken) {\n    localStorage.setItem('x-access-token', accessToken);\n  }\n  setSession(userEmail, userId, accessToken, refreshToken) {\n    localStorage.setItem('user-email', userEmail);\n    localStorage.setItem('user-id', userId);\n    localStorage.setItem('x-access-token', accessToken);\n    localStorage.setItem('x-refresh-token', refreshToken);\n  }\n  removeSession() {\n    localStorage.removeItem('user-email');\n    localStorage.removeItem('user-id');\n    localStorage.removeItem('x-access-token');\n    localStorage.removeItem('x-refresh-token');\n  }\n  getNewAccessToken() {\n    return this.http.get(`${this.webService.ROOT_URL}/users/me/access-token`, {\n      headers: {\n        'x-refresh-token': this.getRefreshToken(),\n        '_id': this.getUserId()\n      },\n      observe: 'response'\n    }).pipe(tap(res => {\n      this.setAccessToken(res.headers.get('x-access-token'));\n    }));\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"mappings":"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","names":["Injectable","shareReplay","tap","AuthService","constructor","webService","router","http","jwtHelper","login","email","password","pipe","res","setSession","body","_id","headers","get","console","log","signup","changePw","userId","getUserId","logout","removeSession","navigate","isLoggedIn","getAccessToken","localStorage","getItem","getRefreshToken","getUserEmail","setAccessToken","accessToken","setItem","userEmail","refreshToken","removeItem","getNewAccessToken","ROOT_URL","observe","providedIn"],"sourceRoot":"","sources":["/Users/suryaslash/Documents/GitHub/sad-01-2023-project-team_1/frontend/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { WebRequestService } from './web-request.service';\nimport { shareReplay, tap } from 'rxjs/operators';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private webService: WebRequestService, private router: Router, private http: HttpClient, public jwtHelper: JwtHelperService) { }\n\n  login( email: string, password: string) {\n    return this.webService.login(email, password).pipe(\n      shareReplay(),\n      tap((res: HttpResponse<any>) => {\n        // the auth tokens will be in the header of this response\n        this.setSession(email, res.body._id, res.headers.get('x-access-token') as string, res.headers.get('x-refresh-token') as string);\n        console.log(\"Logged in\");\n      }\n    )\n    )\n  }\n  signup( email: string, password: string) {\n    return this.webService.signup(email, password).pipe(\n      shareReplay(),\n      tap((res: HttpResponse<any>) => {\n        // the auth tokens will be in the header of this response\n        this.setSession(email, res.body._id, res.headers.get('x-access-token') as string, res.headers.get('x-refresh-token') as string);\n        console.log(\"Signed up\");\n      }\n    )\n    )\n  }\n\n  changePw(email: string, password: string){\n    let userId = this.getUserId();\n    return this.webService.changePw(email, password, userId).pipe(\n      shareReplay(),\n      tap((res: HttpResponse<any>) => {\n        console.log(\"Password changed successfully\");\n      })\n    )\n  }\n\n  logout(){ \n    this.removeSession();\n    this.router.navigate(['/login']);\n  }\n\n  token: any;\n  isLoggedIn(): boolean {\n    if (this.getAccessToken()) return true;\n    else return false;\n  }\n\n  getAccessToken(){\n    return localStorage.getItem('x-access-token');\n  }\n\n  getRefreshToken(){\n    return localStorage.getItem('x-refresh-token') as string;\n  }\n\n  getUserId(){\n    return localStorage.getItem('user-id') as string;\n  }\n\n  getUserEmail(){\n    return localStorage.getItem('user-email');\n  }\n\n  setAccessToken(accessToken: string){\n    localStorage.setItem('x-access-token', accessToken);\n  }\n\n  private setSession(userEmail : string, userId: string, accessToken: string, refreshToken: string){\n    localStorage.setItem('user-email', userEmail);\n    localStorage.setItem('user-id', userId);\n    localStorage.setItem('x-access-token', accessToken);\n    localStorage.setItem('x-refresh-token', refreshToken);\n  }\n\n  private removeSession(){\n    localStorage.removeItem('user-email');\n    localStorage.removeItem('user-id');\n    localStorage.removeItem('x-access-token');\n    localStorage.removeItem('x-refresh-token');\n  }\n\n  getNewAccessToken() {\n    return this.http.get(`${this.webService.ROOT_URL}/users/me/access-token`, {\n      headers: {\n        'x-refresh-token': this.getRefreshToken(),\n        '_id': this.getUserId()\n      },\n      observe: 'response'\n    }).pipe(\n      tap((res: HttpResponse<any>) => {\n        this.setAccessToken(res.headers.get('x-access-token')!);\n      })\n    )\n  }\n\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}