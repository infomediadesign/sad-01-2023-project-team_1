{"ast":null,"code":"import Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/user.service\";\nimport * as i2 from \"@angular/router\";\nexport class ChangePwComponent {\n  constructor(userService, router, route) {\n    this.userService = userService;\n    this.router = router;\n    this.route = route;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.userId = params.userId;\n      console.log(params.userId);\n    });\n  }\n  OnAdminChangePwButtonClicked(oldPw, newPw, confirmNewPw) {\n    // all fields must have an entry\n    if (!newPw || !confirmNewPw) {\n      Swal.fire({\n        title: 'Error',\n        html: 'Please fill in all fields!',\n        icon: 'error',\n        backdrop: false\n      });\n    }\n    // password does not fit criteria\n    else if (newPw.length < 8) {\n      Swal.fire({\n        title: 'Error',\n        html: 'New password must be at least 8 characters long',\n        icon: 'error',\n        backdrop: false\n      });\n    }\n    // passwords not matching\n    else if (newPw !== confirmNewPw) {\n      Swal.fire({\n        title: 'Error',\n        text: \"Passwords don't match\",\n        icon: 'error',\n        backdrop: false\n      });\n    }\n    // check if old pw is correct\n    // perform login to check if pw is correct, if status 200 then ok\n    else {\n      this.userService.changeUserPw(this.userId, newPw).subscribe(res => {\n        Swal.fire({\n          title: 'Success',\n          text: 'User password has been changed successfully!',\n          icon: 'success',\n          backdrop: false\n        }).then(() => {\n          this.router.navigate(['/']);\n        });\n      });\n    }\n  }\n}\nChangePwComponent.ɵfac = function ChangePwComponent_Factory(t) {\n  return new (t || ChangePwComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nChangePwComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChangePwComponent,\n  selectors: [[\"app-change-pw\"]],\n  decls: 23,\n  vars: 0,\n  consts: [[1, \"centered-content\"], [1, \"white-box\"], [1, \"change-password-title\", \"has-text-primary\"], [1, \"field\"], [1, \"control\", \"has-icons-left\"], [\"type\", \"password\", \"placeholder\", \"New password\", 1, \"input\", \"has-background-light\"], [\"newPwInput\", \"\"], [1, \"icon\", \"is-small\", \"is-left\"], [1, \"fas\", \"fa-key\"], [\"type\", \"password\", \"placeholder\", \"Confirm new password\", 1, \"input\", \"has-background-light\"], [\"confirmNewPwInput\", \"\"], [1, \"buttons\", \"is-right\"], [\"routerLink\", \"/\", 1, \"button\", \"is-danger\", \"has-text-white\"], [1, \"button\", \"is-success\", \"has-text-white\", 3, \"click\"]],\n  template: function ChangePwComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r2 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n      i0.ɵɵtext(3, \"Change User Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"br\");\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"p\", 4);\n      i0.ɵɵelement(7, \"input\", 5, 6);\n      i0.ɵɵelementStart(9, \"span\", 7);\n      i0.ɵɵelement(10, \"i\", 8);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(11, \"div\", 3)(12, \"p\", 4);\n      i0.ɵɵelement(13, \"input\", 9, 10);\n      i0.ɵɵelementStart(15, \"span\", 7);\n      i0.ɵɵelement(16, \"i\", 8);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(17, \"br\");\n      i0.ɵɵelementStart(18, \"div\", 11)(19, \"button\", 12);\n      i0.ɵɵtext(20, \"Cancel\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function ChangePwComponent_Template_button_click_21_listener() {\n        i0.ɵɵrestoreView(_r2);\n        const _r0 = i0.ɵɵreference(8);\n        const _r1 = i0.ɵɵreference(14);\n        return i0.ɵɵresetView(ctx.OnAdminChangePwButtonClicked(_r0.value, _r1.value));\n      });\n      i0.ɵɵtext(22, \"Change Password\");\n      i0.ɵɵelementEnd()()()();\n    }\n  },\n  dependencies: [i2.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAIA,OAAOA,IAAI,MAAM,aAAa;;;;AAO9B,OAAM,MAAOC,iBAAiB;EAC5BC,YAAoBC,WAAwB,EAAUC,MAAc,EAAUC,KAAqB;IAA/E,gBAAW,GAAXF,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAkB,UAAK,GAALC,KAAK;EAAkB;EAIrGC,QAAQ;IACN,IAAI,CAACD,KAAK,CAACE,MAAM,CAACC,SAAS,CACxBD,MAAc,IAAI;MACjB,IAAI,CAACE,MAAM,GAAGF,MAAM,CAACE,MAAM;MAC3BC,OAAO,CAACC,GAAG,CAACJ,MAAM,CAACE,MAAM,CAAC;IAC5B,CAAC,CACF;EACH;EAEAG,4BAA4B,CAACC,KAAa,EAAEC,KAAa,EAAEC,YAAoB;IAC7E;IACA,IAAI,CAACD,KAAK,IAAI,CAACC,YAAY,EAAC;MAC1Bf,IAAI,CAACgB,IAAI,CAAC;QACRC,KAAK,EAAE,OAAO;QACdC,IAAI,EAAE,4BAA4B;QAClCC,IAAI,EAAE,OAAO;QACbC,QAAQ,EAAE;OACX,CAAC;;IAGJ;IAAA,KACK,IAAIN,KAAK,CAACO,MAAM,GAAG,CAAC,EAAC;MACxBrB,IAAI,CAACgB,IAAI,CAAC;QACRC,KAAK,EAAE,OAAO;QACdC,IAAI,EAAE,iDAAiD;QACvDC,IAAI,EAAE,OAAO;QACbC,QAAQ,EAAE;OACX,CAAC;;IAGJ;IAAA,KACK,IAAIN,KAAK,KAAKC,YAAY,EAAC;MAC9Bf,IAAI,CAACgB,IAAI,CAAC;QACRC,KAAK,EAAE,OAAO;QACdK,IAAI,EAAE,uBAAuB;QAC7BH,IAAI,EAAE,OAAO;QACbC,QAAQ,EAAE;OACX,CAAC;;IAGJ;IACA;IAAA,KACI;MACA,IAAI,CAACjB,WAAW,CAACoB,YAAY,CAAC,IAAI,CAACd,MAAM,EAAEK,KAAK,CAAC,CAACN,SAAS,CAAEgB,GAAsB,IAAI;QACnFxB,IAAI,CAACgB,IAAI,CAAC;UACRC,KAAK,EAAE,SAAS;UAChBK,IAAI,EAAE,8CAA8C;UACpDH,IAAI,EAAE,SAAS;UACfC,QAAQ,EAAE;SACX,CAAC,CAACK,IAAI,CAAC,MAAK;UACX,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC,CAAC;MACN,CAAC,CAAC;;EAGJ;;AA5DOzB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAA0B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;MCX9BC,8BAA8B;MAG2BA,oCAAoB;MAAAA,iBAAK;MAC5EA,qBAAI;MACJA,8BAAmB;MAEfA,8BAAiG;MACjGA,+BAAoC;MAClCA,wBAA0B;MAC5BA,iBAAO;MAGXA,+BAAmB;MAEfA,gCAAgH;MAChHA,gCAAoC;MAClCA,wBAA0B;MAC5BA,iBAAO;MAGXA,sBAAI;MACJA,gCAA8B;MACqCA,uBAAM;MAAAA,iBAAS;MAC9EA,mCAAmI;MAAlFA;QAAAA;QAAA;QAAA;QAAA,OAASA,qEAAuE;MAAA,EAAC;MAACA,gCAAe;MAAAA,iBAAS","names":["Swal","ChangePwComponent","constructor","userService","router","route","ngOnInit","params","subscribe","userId","console","log","OnAdminChangePwButtonClicked","oldPw","newPw","confirmNewPw","fire","title","html","icon","backdrop","length","text","changeUserPw","res","then","navigate","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/Users/suryaslash/Documents/GitHub/sad-01-2023-project-team_1/frontend/src/app/pages/admin/change-pw/change-pw.component.ts","/Users/suryaslash/Documents/GitHub/sad-01-2023-project-team_1/frontend/src/app/pages/admin/change-pw/change-pw.component.html"],"sourcesContent":["import { HttpResponse } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { UserService } from 'src/app/user.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-change-pw',\n  templateUrl: './change-pw.component.html',\n  styleUrls: ['./change-pw.component.scss']\n})\nexport class ChangePwComponent {\n  constructor(private userService: UserService, private router: Router, private route: ActivatedRoute){}\n\n  userId: string;\n\n  ngOnInit() {\n    this.route.params.subscribe(\n      (params: Params) => {\n        this.userId = params.userId;\n        console.log(params.userId);\n      }\n    )\n  }\n\n  OnAdminChangePwButtonClicked(oldPw: string, newPw: string, confirmNewPw: string){\n    // all fields must have an entry\n    if (!newPw || !confirmNewPw){\n      Swal.fire({\n        title: 'Error',\n        html: 'Please fill in all fields!',\n        icon: 'error',\n        backdrop: false\n      })\n    }\n\n    // password does not fit criteria\n    else if (newPw.length < 8){\n      Swal.fire({\n        title: 'Error',\n        html: 'New password must be at least 8 characters long',\n        icon: 'error',\n        backdrop: false\n      })\n    }\n\n    // passwords not matching\n    else if (newPw !== confirmNewPw){\n      Swal.fire({\n        title: 'Error',\n        text: \"Passwords don't match\",\n        icon: 'error',\n        backdrop: false\n      })\n    }\n    \n    // check if old pw is correct\n    // perform login to check if pw is correct, if status 200 then ok\n    else{\n        this.userService.changeUserPw(this.userId, newPw).subscribe((res: HttpResponse<any>) => {\n            Swal.fire({\n              title: 'Success',\n              text: 'User password has been changed successfully!',\n              icon: 'success',\n              backdrop: false\n            }).then(() => {\n              this.router.navigate(['/']);\n            })\n        })\n          \n        }\n      }\n    }\n","<div class=\"centered-content\">\n    <div class=\"white-box\">\n  \n      <h1 class=\"change-password-title has-text-primary\">Change User Password</h1>\n      <br>\n      <div class=\"field\">\n        <p class=\"control has-icons-left\">\n          <input #newPwInput class=\"input has-background-light\" type=\"password\" placeholder=\"New password\">\n          <span class=\"icon is-small is-left\">\n            <i class=\"fas fa-key\"></i>\n          </span>\n        </p>\n      </div>\n      <div class=\"field\">\n        <p class=\"control has-icons-left\">\n          <input #confirmNewPwInput class=\"input has-background-light\" type=\"password\" placeholder=\"Confirm new password\">\n          <span class=\"icon is-small is-left\">\n            <i class=\"fas fa-key\"></i>\n          </span>\n        </p>\n      </div>\n      <br>\n      <div class=\"buttons is-right\">\n          <button class=\"button is-danger has-text-white\" routerLink=\"/\">Cancel</button>\n          <button class=\"button is-success has-text-white\" (click)=\"OnAdminChangePwButtonClicked(newPwInput.value, confirmNewPwInput.value)\">Change Password</button>\n      </div>\n    </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}