{"ast":null,"code":"import { shareReplay, tap } from 'rxjs/operators';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web-request.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(webService, router, http) {\n    this.webService = webService;\n    this.router = router;\n    this.http = http;\n  }\n  login(email, password) {\n    return this.webService.login(email, password).pipe(shareReplay(), tap(res => {\n      // the auth tokens will be in the header of this response\n      this.setSession(res.body._id, res.headers.get('x-access-token'), res.headers.get('x-refresh-token'));\n      console.log(\"Logged in\");\n    }));\n  }\n  signup(email, password) {\n    return this.webService.signup(email, password).pipe(shareReplay(), tap(res => {\n      // the auth tokens will be in the header of this response\n      this.setSession(res.body._id, res.headers.get('x-access-token'), res.headers.get('x-refresh-token'));\n      console.log(\"Signed up\");\n    }));\n  }\n  logout() {\n    this.removeSession();\n    Swal.fire({\n      title: 'Logout',\n      html: 'Are you sure you want to log out?',\n      icon: 'warning',\n      backdrop: false\n    });\n    this.router.navigate(['/login']);\n  }\n  getAccessToken() {\n    return localStorage.getItem('x-access-token');\n  }\n  getRefreshToken() {\n    return localStorage.getItem('x-refresh-token');\n  }\n  getUserId() {\n    return localStorage.getItem('user-id');\n  }\n  setAccessToken(accessToken) {\n    localStorage.setItem('x-access-token', accessToken);\n  }\n  setSession(userId, accessToken, refreshToken) {\n    localStorage.setItem('user-id', userId);\n    localStorage.setItem('x-access-token', accessToken);\n    localStorage.setItem('x-refresh-token', refreshToken);\n  }\n  removeSession() {\n    localStorage.removeItem('user-id');\n    localStorage.removeItem('x-access-token');\n    localStorage.removeItem('x-refresh-token');\n  }\n  getNewAccessToken() {\n    return this.http.get(`${this.webService.ROOT_URL}/users/me/access-token`, {\n      headers: {\n        'x-refresh-token': this.getRefreshToken(),\n        '_id': this.getUserId()\n      },\n      observe: 'response'\n    }).pipe(tap(res => {\n      this.setAccessToken(res.headers.get('x-access-token'));\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.WebRequestService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["shareReplay","tap","Swal","AuthService","constructor","webService","router","http","login","email","password","pipe","res","setSession","body","_id","headers","get","console","log","signup","logout","removeSession","fire","title","html","icon","backdrop","navigate","getAccessToken","localStorage","getItem","getRefreshToken","getUserId","setAccessToken","accessToken","setItem","userId","refreshToken","removeItem","getNewAccessToken","ROOT_URL","observe","factory","providedIn"],"sourceRoot":"","sources":["/Users/suryaslash/Documents/GitHub/sad-01-2023-project-team_1/frontend/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { WebRequestService } from './web-request.service';\nimport { shareReplay, tap } from 'rxjs/operators';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { ErrorHandlingMiddlewareWithOption } from 'mongoose';\nimport Swal from 'sweetalert2';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private webService: WebRequestService, private router: Router, private http: HttpClient) { }\n\n  login( email: string, password: string) {\n    return this.webService.login(email, password).pipe(\n      shareReplay(),\n      tap((res: HttpResponse<any>) => {\n        // the auth tokens will be in the header of this response\n        this.setSession(res.body._id, res.headers.get('x-access-token') as string, res.headers.get('x-refresh-token') as string);\n        console.log(\"Logged in\");\n      }\n    )\n    )\n  }\n  signup( email: string, password: string) {\n    return this.webService.signup(email, password).pipe(\n      shareReplay(),\n      tap((res: HttpResponse<any>) => {\n        // the auth tokens will be in the header of this response\n        this.setSession(res.body._id, res.headers.get('x-access-token') as string, res.headers.get('x-refresh-token') as string);\n        console.log(\"Signed up\");\n      }\n    )\n    )\n  }\n\n  logout(){\n    this.removeSession();\n    Swal.fire({\n      title: 'Logout',\n      html: 'Are you sure you want to log out?',\n      icon: 'warning',\n      backdrop: false\n  })\n    this.router.navigate(['/login']);\n  }\n\n  getAccessToken(){\n    return localStorage.getItem('x-access-token');\n  }\n\n  getRefreshToken(){\n    return localStorage.getItem('x-refresh-token') as string;\n  }\n\n  getUserId(){\n    return localStorage.getItem('user-id') as string;\n  }\n\n  setAccessToken(accessToken: string){\n    localStorage.setItem('x-access-token', accessToken);\n  }\n\n  private setSession(userId : string, accessToken: string, refreshToken: string){\n    localStorage.setItem('user-id', userId);\n    localStorage.setItem('x-access-token', accessToken);\n    localStorage.setItem('x-refresh-token', refreshToken);\n  }\n\n  private removeSession(){\n    localStorage.removeItem('user-id');\n    localStorage.removeItem('x-access-token');\n    localStorage.removeItem('x-refresh-token');\n  }\n\n  getNewAccessToken() {\n    return this.http.get(`${this.webService.ROOT_URL}/users/me/access-token`, {\n      headers: {\n        'x-refresh-token': this.getRefreshToken(),\n        '_id': this.getUserId()\n      },\n      observe: 'response'\n    }).pipe(\n      tap((res: HttpResponse<any>) => {\n        this.setAccessToken(res.headers.get('x-access-token')!);\n      })\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}