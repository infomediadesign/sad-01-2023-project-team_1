{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class WebReqInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    // Handle the request\n    request = this.addAuthHeader(request);\n    // call next() and handle response\n    return next.handle(request).pipe(catchError(error => {\n      console.log(error);\n      if (error.status === 401) {\n        // 401 so we are unauthorized\n        // refresh access token\n        console.log(\"test\");\n        this.authService.logout();\n      }\n      return throwError(error);\n    }));\n  }\n  refreshAccessToken() {\n    // we want to call a method to send a request to refresh access token\n  }\n  addAuthHeader(request) {\n    // get access token\n    const token = this.authService.getAccessToken();\n    if (token) {\n      // append access token to req header\n      return request.clone({\n        setHeaders: {\n          'x-access-token': token\n        }\n      });\n    }\n    return request;\n  }\n}\nWebReqInterceptor.ɵfac = function WebReqInterceptor_Factory(t) {\n  return new (t || WebReqInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nWebReqInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebReqInterceptor,\n  factory: WebReqInterceptor.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAcC,UAAU,QAAQ,MAAM;;;AAOzD,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAiB;EAEhDC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD;IAEAD,OAAO,GAAG,IAAI,CAACE,aAAa,CAACF,OAAO,CAAC;IAErC;IACA,OAAOC,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC,CAACI,IAAI,CAC9BV,UAAU,CAAEW,KAAwB,IAAI;MACtCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAElB,IAAIA,KAAK,CAACG,MAAM,KAAK,GAAG,EAAC;QACvB;QAEA;QAGAF,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QACnB,IAAI,CAACT,WAAW,CAACW,MAAM,EAAE;;MAE3B,OAAOd,UAAU,CAACU,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAEAK,kBAAkB;IAChB;EAAA;EAGFR,aAAa,CAACF,OAAyB;IACrC;IACA,MAAMW,KAAK,GAAG,IAAI,CAACb,WAAW,CAACc,cAAc,EAAE;IAE/C,IAAID,KAAK,EAAE;MACL;MACA,OAAOX,OAAO,CAACa,KAAK,CAAC;QACnBC,UAAU,EAAE;UACV,gBAAgB,EAAEH;;OAErB,CAAC;;IAER,OAAOX,OAAO;EAEhB;;AA9CWJ,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAmB,SAAjBnB,iBAAiB;EAAAoB,YAFhB;AAAM","names":["catchError","throwError","WebReqInterceptor","constructor","authService","intercept","request","next","addAuthHeader","handle","pipe","error","console","log","status","logout","refreshAccessToken","token","getAccessToken","clone","setHeaders","factory","providedIn"],"sourceRoot":"","sources":["/Users/suryaslash/Documents/GitHub/sad-01-2023-project-team_1/frontend/src/app/web-req.interceptor.ts"],"sourcesContent":["import { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebReqInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<any> {\n    // Handle the request\n\n    request = this.addAuthHeader(request);\n\n    // call next() and handle response\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        console.log(error);\n\n        if (error.status === 401){\n          // 401 so we are unauthorized\n\n          // refresh access token\n\n\n          console.log(\"test\");\n          this.authService.logout();\n        }\n        return throwError(error);\n      })\n    )\n  }\n\n  refreshAccessToken(){\n    // we want to call a method to send a request to refresh access token\n  }\n\n  addAuthHeader(request: HttpRequest<any>){\n    // get access token\n    const token = this.authService.getAccessToken();\n\n    if (token) {\n          // append access token to req header\n          return request.clone({\n            setHeaders: {\n              'x-access-token': token\n            }\n          })\n    }\n    return request;\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}