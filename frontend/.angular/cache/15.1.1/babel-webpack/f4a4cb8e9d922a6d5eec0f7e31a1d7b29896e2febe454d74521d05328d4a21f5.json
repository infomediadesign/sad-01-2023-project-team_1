{"ast":null,"code":"import { shareReplay, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web-request.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(webService, router) {\n    this.webService = webService;\n    this.router = router;\n  }\n  login(email, password) {\n    return this.webService.login(email, password).pipe(shareReplay(), tap(res => {\n      // the auth tokens will be in the header of this response\n      this.setSession(res.body._id, res.headers.get('x-access-token'), res.headers.get('x-refresh-token'));\n      console.log(\"Logged in\");\n    }));\n  }\n  logout() {\n    this.removeSession();\n    this.router.navigateByUrl('/login');\n  }\n  getAccessToken() {\n    return localStorage.getItem('x-access-item');\n  }\n  getRefreshToken() {\n    return localStorage.getItem('x-refresh -token');\n  }\n  setAccessToken(accessToken) {\n    localStorage.setItem('x-access-item', accessToken);\n  }\n  setSession(userId, accessToken, refreshToken) {\n    localStorage.setItem('user-id', userId);\n    localStorage.setItem('access-token', accessToken);\n    localStorage.setItem('refresh-token', refreshToken);\n  }\n  removeSession() {\n    localStorage.removeItem('userId');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.WebRequestService), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAMjD,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,UAA6B,EAAUC,MAAc;IAArD,eAAU,GAAVD,UAAU;IAA6B,WAAM,GAANC,MAAM;EAAY;EAE7EC,KAAK,CAAEC,KAAa,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAACJ,UAAU,CAACE,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC,CAACC,IAAI,CAChDT,WAAW,EAAE,EACbC,GAAG,CAAES,GAAsB,IAAI;MAC7B;MACA,IAAI,CAACC,UAAU,CAACD,GAAG,CAACE,IAAI,CAACC,GAAG,EAAEH,GAAG,CAACI,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAW,EAAEL,GAAG,CAACI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAW,CAAC;MACxHC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1B,CAAC,CACF,CACA;EACH;EAEAC,MAAM;IACJ,IAAI,CAACC,aAAa,EAAE;IAEpB,IAAI,CAACd,MAAM,CAACe,aAAa,CAAC,QAAQ,CAAC;EACrC;EAEAC,cAAc;IACZ,OAAOC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EAC9C;EAEAC,eAAe;IACb,OAAOF,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;EACjD;EAEAE,cAAc,CAACC,WAAmB;IAChCJ,YAAY,CAACK,OAAO,CAAC,eAAe,EAAED,WAAW,CAAC;EACpD;EAEQf,UAAU,CAACiB,MAAe,EAAEF,WAAmB,EAAEG,YAAoB;IAC3EP,YAAY,CAACK,OAAO,CAAC,SAAS,EAAEC,MAAM,CAAC;IACvCN,YAAY,CAACK,OAAO,CAAC,cAAc,EAAED,WAAW,CAAC;IACjDJ,YAAY,CAACK,OAAO,CAAC,eAAe,EAAEE,YAAY,CAAC;EACrD;EAEQV,aAAa;IACnBG,YAAY,CAACQ,UAAU,CAAC,QAAQ,CAAC;IACjCR,YAAY,CAACQ,UAAU,CAAC,aAAa,CAAC;IACtCR,YAAY,CAACQ,UAAU,CAAC,cAAc,CAAC;EACzC;;AA5CW5B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA6B,SAAX7B,WAAW;EAAA8B,YAFV;AAAM","names":["shareReplay","tap","AuthService","constructor","webService","router","login","email","password","pipe","res","setSession","body","_id","headers","get","console","log","logout","removeSession","navigateByUrl","getAccessToken","localStorage","getItem","getRefreshToken","setAccessToken","accessToken","setItem","userId","refreshToken","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/Users/suryaslash/Documents/GitHub/sad-01-2023-project-team_1/frontend/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { WebRequestService } from './web-request.service';\nimport { shareReplay, tap } from 'rxjs/operators';\nimport { HttpResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private webService: WebRequestService, private router: Router) { }\n\n  login( email: string, password: string) {\n    return this.webService.login(email, password).pipe(\n      shareReplay(),\n      tap((res: HttpResponse<any>) => {\n        // the auth tokens will be in the header of this response\n        this.setSession(res.body._id, res.headers.get('x-access-token') as string, res.headers.get('x-refresh-token') as string);\n        console.log(\"Logged in\");\n      }\n    )\n    )\n  }\n\n  logout(){\n    this.removeSession();\n\n    this.router.navigateByUrl('/login');\n  }\n\n  getAccessToken(){\n    return localStorage.getItem('x-access-item');\n  }\n\n  getRefreshToken(){\n    return localStorage.getItem('x-refresh -token');\n  }\n\n  setAccessToken(accessToken: string){\n    localStorage.setItem('x-access-item', accessToken);\n  }\n\n  private setSession(userId : string, accessToken: string, refreshToken: string){\n    localStorage.setItem('user-id', userId);\n    localStorage.setItem('access-token', accessToken);\n    localStorage.setItem('refresh-token', refreshToken);\n  }\n\n  private removeSession(){\n    localStorage.removeItem('userId');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}