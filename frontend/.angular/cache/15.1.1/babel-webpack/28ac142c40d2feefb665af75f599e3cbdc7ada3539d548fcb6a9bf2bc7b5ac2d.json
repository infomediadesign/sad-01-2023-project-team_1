{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet TaskViewComponent = class TaskViewComponent {\n  constructor(taskService, route, router, authService) {\n    this.taskService = taskService;\n    this.route = route;\n    this.router = router;\n    this.authService = authService;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (params['listId']) {\n        this.selectedListId = params['listId'];\n        this.taskService.getTasks(params['listId']).subscribe(tasks => {\n          this.tasks = tasks;\n        });\n      } else {\n        this.tasks = undefined;\n      }\n    });\n    this.taskService.getLists().subscribe(lists => {\n      this.lists = lists;\n    });\n  }\n  onTaskClick(task) {\n    // we want to set the task to completed\n    this.taskService.complete(task).subscribe(() => {\n      // the task has been set to completed successfully\n      console.log(\"Completed successully!\");\n      task.completed = !task.completed;\n    });\n  }\n  onDeleteListClick() {\n    this.taskService.deleteList(this.selectedListId).subscribe(res => {\n      this.router.navigate(['/lists']);\n      console.log(res);\n    });\n  }\n  onDeleteTaskClick(id) {\n    this.taskService.deleteTask(this.selectedListId, id).subscribe(res => {\n      this.tasks = this.tasks.filter(val => val._id !== id);\n      console.log(res);\n    });\n  }\n  logout() {\n    this.authService.logout();\n    console.log(\"Logged out\");\n  }\n};\nTaskViewComponent = __decorate([Component({\n  selector: 'app-task-view',\n  templateUrl: './task-view.component.html',\n  styleUrls: ['./task-view.component.scss']\n})], TaskViewComponent);\nexport { TaskViewComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAalC,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAO9BC,YAAoBC,WAAwB,EAAUC,KAAqB,EAAUC,MAAc,EAAUC,WAAwB;IAAjH,gBAAW,GAAXH,WAAW;IAAuB,UAAK,GAALC,KAAK;IAA0B,WAAM,GAANC,MAAM;IAAkB,gBAAW,GAAXC,WAAW;EAAiB;EAEzIC,QAAQ;IACJ,IAAI,CAACH,KAAK,CAACI,MAAM,CAACC,SAAS,CACxBD,MAAc,IAAI;MACjB,IAAIA,MAAM,CAAC,QAAQ,CAAC,EAAC;QACpB,IAAI,CAACE,cAAc,GAAGF,MAAM,CAAC,QAAQ,CAAC;QACjC,IAAI,CAACL,WAAW,CAACQ,QAAQ,CAACH,MAAM,CAAC,QAAQ,CAAC,CAAC,CAACC,SAAS,CAAEG,KAAU,IAAI;UAC1E,IAAI,CAACA,KAAK,GAAGA,KAAK;QACP,CAAC,CAAC;OACL,MACG;QACF,IAAI,CAACA,KAAK,GAAGC,SAAS;;IAE1B,CAAC,CACR;IACH,IAAI,CAACV,WAAW,CAACW,QAAQ,EAAE,CAACL,SAAS,CAAEM,KAAU,IAAI;MACnD,IAAI,CAACA,KAAK,GAAGA,KAAK;IACpB,CAAC,CAAC;EACJ;EAECC,WAAW,CAACC,IAAU;IACrB;IACA,IAAI,CAACd,WAAW,CAACe,QAAQ,CAACD,IAAI,CAAC,CAACR,SAAS,CAAC,MAAK;MAC7C;MACAU,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCH,IAAI,CAACI,SAAS,GAAG,CAACJ,IAAI,CAACI,SAAS;IAClC,CAAC,CAAC;EACJ;EAEAC,iBAAiB;IACf,IAAI,CAACnB,WAAW,CAACoB,UAAU,CAAC,IAAI,CAACb,cAAc,CAAC,CAACD,SAAS,CAAEe,GAAQ,IAAI;MACtE,IAAI,CAACnB,MAAM,CAACoB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChCN,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;IAClB,CAAC,CAAC;EACJ;EAEAE,iBAAiB,CAACC,EAAU;IAC1B,IAAI,CAACxB,WAAW,CAACyB,UAAU,CAAC,IAAI,CAAClB,cAAc,EAAEiB,EAAE,CAAC,CAAClB,SAAS,CAAEe,GAAQ,IAAI;MAC1E,IAAI,CAACZ,KAAK,GAAG,IAAI,CAACA,KAAK,CAACiB,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,GAAG,KAAKJ,EAAE,CAAC;MACrDR,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;IAClB,CAAC,CAAC;EACJ;EAEAQ,MAAM;IACJ,IAAI,CAAC1B,WAAW,CAAC0B,MAAM,EAAE;IACzBb,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EAC3B;CAED;AAxDYnB,iBAAiB,eAL7BD,SAAS,CAAC;EACTiC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACWlC,iBAAiB,CAwD7B;SAxDYA,iBAAiB","names":["Component","TaskViewComponent","constructor","taskService","route","router","authService","ngOnInit","params","subscribe","selectedListId","getTasks","tasks","undefined","getLists","lists","onTaskClick","task","complete","console","log","completed","onDeleteListClick","deleteList","res","navigate","onDeleteTaskClick","id","deleteTask","filter","val","_id","logout","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/suryaslash/Documents/GitHub/sad-01-2023-project-team_1/frontend/src/app/pages/task-view/task-view.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { TaskService } from 'src/app/task.service';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Task } from 'src/app/models/task.model';\nimport { List } from 'src/app/models/list.model';\nimport { AuthService } from 'src/app/auth.service';\n\n@Component({\n  selector: 'app-task-view',\n  templateUrl: './task-view.component.html',\n  styleUrls: ['./task-view.component.scss']\n})\nexport class TaskViewComponent implements OnInit {\n\nlists: any;\ntasks: any;\n\n selectedListId: string;\n\nconstructor(private taskService: TaskService, private route: ActivatedRoute, private router: Router, private authService: AuthService) { }\n\nngOnInit() {\n    this.route.params.subscribe(\n      (params: Params) => {\n        if (params['listId']){\n         this.selectedListId = params['listId'];\n              this.taskService.getTasks(params['listId']).subscribe((tasks: any) => {\n         this.tasks = tasks;\n                    })\n                }\n                else{\n                  this.tasks = undefined;\n                }\n              }\n      )\n    this.taskService.getLists().subscribe((lists: any) => {\n      this.lists = lists;\n    })\n  }\n    \n   onTaskClick(task: Task) {\n    // we want to set the task to completed\n    this.taskService.complete(task).subscribe(() => {\n      // the task has been set to completed successfully\n      console.log(\"Completed successully!\");\n      task.completed = !task.completed;\n    })\n  }\n\n  onDeleteListClick() {\n    this.taskService.deleteList(this.selectedListId).subscribe((res: any) => {\n      this.router.navigate(['/lists']);\n      console.log(res);\n    })\n  }\n\n  onDeleteTaskClick(id: string) {\n    this.taskService.deleteTask(this.selectedListId, id).subscribe((res: any) => {\n      this.tasks = this.tasks.filter(val => val._id !== id);\n      console.log(res);\n    })\n  }\n\n  logout(){\n    this.authService.logout();\n    console.log(\"Logged out\");\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}