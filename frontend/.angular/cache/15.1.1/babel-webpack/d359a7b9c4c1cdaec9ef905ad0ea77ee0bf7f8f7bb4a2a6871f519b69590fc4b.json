{"ast":null,"code":"import Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/task.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/auth.service\";\nexport class UsersComponent {\n  constructor(taskService, route, router, authService) {\n    this.taskService = taskService;\n    this.route = route;\n    this.router = router;\n    this.authService = authService;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (params['listId']) {\n        this.selectedListId = params['listId'];\n        this.taskService.getTasks(params['listId']).subscribe(tasks => {\n          this.tasks = tasks;\n        });\n      } else {\n        this.tasks = undefined;\n      }\n    });\n    this.taskService.getLists().subscribe(lists => {\n      this.lists = lists;\n    });\n    this.userEmail = this.authService.getUserEmail();\n    this.isUserAdmin = this.authService.checkIfAdmin();\n    // console.log(this.isUserAdmin);\n  }\n\n  onTaskClick(task) {\n    // we want to set the task to completed\n    this.taskService.complete(task).subscribe(() => {\n      // the task has been set to completed successfully\n      console.log(\"Completed successully!\");\n      task.completed = !task.completed;\n    });\n  }\n  onDeleteListClick() {\n    this.taskService.deleteList(this.selectedListId).subscribe(res => {\n      this.router.navigate(['/lists']);\n      console.log(res);\n    });\n  }\n  onDeleteTaskClick(id) {\n    this.taskService.deleteTask(this.selectedListId, id).subscribe(res => {\n      this.tasks = this.tasks.filter(val => val._id !== id);\n      console.log(res);\n    });\n  }\n  logout() {\n    this.authService.logout();\n    console.log(\"Logged out\");\n  }\n  logoutButton() {\n    Swal.fire({\n      text: 'Are you sure you want to log out?',\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      cancelButtonText: 'No',\n      confirmButtonText: 'Yes',\n      backdrop: false\n    }).then(result => {\n      if (result.isConfirmed) {\n        this.logout();\n      }\n    });\n  }\n}\nUsersComponent.ɵfac = function UsersComponent_Factory(t) {\n  return new (t || UsersComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthService));\n};\nUsersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UsersComponent,\n  selectors: [[\"app-users\"]],\n  decls: 2,\n  vars: 0,\n  template: function UsersComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"users works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Swal","UsersComponent","constructor","taskService","route","router","authService","ngOnInit","params","subscribe","selectedListId","getTasks","tasks","undefined","getLists","lists","userEmail","getUserEmail","isUserAdmin","checkIfAdmin","onTaskClick","task","complete","console","log","completed","onDeleteListClick","deleteList","res","navigate","onDeleteTaskClick","id","deleteTask","filter","val","_id","logout","logoutButton","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","cancelButtonText","confirmButtonText","backdrop","then","result","isConfirmed","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["/Users/suryaslash/Documents/GitHub/sad-01-2023-project-team_1/frontend/src/app/pages/admin/users/users.component.ts","/Users/suryaslash/Documents/GitHub/sad-01-2023-project-team_1/frontend/src/app/pages/admin/users/users.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { AuthService } from 'src/app/auth.service';\nimport { Task } from 'src/app/models/task.model';\nimport { TaskService } from 'src/app/task.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit {\n\n  lists: any;\n  tasks: any;\n  userEmail: string;\n  isUserAdmin: boolean;\n  \n  selectedListId: string;\n  \n  constructor(private taskService: TaskService, private route: ActivatedRoute, private router: Router, private authService: AuthService) { }\n  \n   ngOnInit() {\n      this.route.params.subscribe(\n        (params: Params) => {\n          if(params['listId']){\n           this.selectedListId = params['listId'];\n                this.taskService.getTasks(params['listId']).subscribe((tasks: any) => {\n                  this.tasks = tasks;\n                  })\n            }\n            else{\n              this.tasks = undefined;\n            }\n          }\n        )\n      this.taskService.getLists().subscribe((lists: any) => {\n        this.lists = lists;\n      })\n  \n      this.userEmail = this.authService.getUserEmail();\n      this.isUserAdmin = this.authService.checkIfAdmin();\n      // console.log(this.isUserAdmin);\n  \n    }\n      \n    onTaskClick(task: Task) {\n      // we want to set the task to completed\n      this.taskService.complete(task).subscribe(() => {\n        // the task has been set to completed successfully\n        console.log(\"Completed successully!\");\n        task.completed = !task.completed;\n      })\n    }\n  \n    onDeleteListClick() {\n      this.taskService.deleteList(this.selectedListId).subscribe((res: any) => {\n        this.router.navigate(['/lists']);\n        console.log(res);\n      })\n    }\n  \n    onDeleteTaskClick(id: string) {\n      this.taskService.deleteTask(this.selectedListId, id).subscribe((res: any) => {\n        this.tasks = this.tasks.filter(val => val._id !== id);\n        console.log(res);\n      })\n    }\n  \n    logout(){\n      this.authService.logout();\n      console.log(\"Logged out\");\n    }\n  \n    logoutButton(){\n      Swal.fire({\n        text: 'Are you sure you want to log out?',\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        cancelButtonText: 'No',\n        confirmButtonText: 'Yes',\n        backdrop: false\n      }).then((result) => {\n        if (result.isConfirmed) {\n          this.logout();\n        }})   \n    }\n  \n  }\n  ","<p>users works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}