{"ast":null,"code":"import { throwError, empty, Subject } from 'rxjs';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class WebReqInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n    this.accessTokenRefreshed = new Subject();\n  }\n  intercept(request, next) {\n    // Handle the request\n    request = this.addAuthHeader(request);\n    // call next() and handle response\n    return next.handle(request).pipe(catchError(error => {\n      console.log(error);\n      const login_url = \"http://localhost:3000/users/login\";\n      const users_url = \"http://localhost:3000/users\";\n      if (error.status === 401) {\n        // 401 so we are unauthorized\n        // refresh access token\n        return this.refreshAccessToken().pipe(switchMap(() => {\n          request = this.addAuthHeader(request);\n          return next.handle(request);\n        }), catchError(err => {\n          console.log(err);\n          this.authService.logout();\n          return empty();\n        }));\n      } else if (error.url === login_url) {\n        Swal.fire({\n          title: 'Error',\n          text: 'Please check your credentials',\n          icon: 'error',\n          backdrop: false\n        });\n      } else if (error.url === users_url && error.status === 400) {\n        if (error.error.code && error.error.code === 11000) {\n          Swal.fire({\n            title: 'Error',\n            html: 'Email already registered. Please log in.',\n            icon: 'error',\n            backdrop: false\n          });\n        } else {\n          Swal.fire({\n            title: 'Error',\n            html: '1. Email must be at least 1 character long <br>2. Password must be at least 8 characters long',\n            icon: 'error',\n            backdrop: false\n          });\n        }\n      }\n      return throwError(error);\n    }));\n  }\n  refreshAccessToken() {\n    this.refreshingAccessToken = true;\n    // we want to call a method to send a request to refresh access token\n    return this.authService.getNewAccessToken().pipe(tap(() => {\n      this.refreshingAccessToken = false;\n      console.log(\"Access Token Refreshed!\");\n    }));\n  }\n  addAuthHeader(request) {\n    // get access token\n    const token = this.authService.getAccessToken();\n    if (token) {\n      // append access token to req header\n      return request.clone({\n        setHeaders: {\n          'x-access-token': token\n        }\n      });\n    }\n    return request;\n  }\n}\nWebReqInterceptor.ɵfac = function WebReqInterceptor_Factory(t) {\n  return new (t || WebReqInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nWebReqInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebReqInterceptor,\n  factory: WebReqInterceptor.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","empty","Subject","catchError","tap","switchMap","Swal","WebReqInterceptor","constructor","authService","intercept","request","next","addAuthHeader","handle","pipe","error","console","log","login_url","users_url","status","refreshAccessToken","err","logout","url","fire","title","text","icon","backdrop","code","html","refreshingAccessToken","getNewAccessToken","token","getAccessToken","clone","setHeaders","factory","providedIn"],"sourceRoot":"","sources":["/Users/suryaslash/Documents/GitHub/sad-01-2023-project-team_1/frontend/src/app/web-req.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, empty, Subject } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nimport Swal from 'sweetalert2';\nimport { AbsoluteSourceSpan } from '@angular/compiler';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebReqInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) { }\n\n  refreshingAccessToken: boolean | undefined;\n  accessTokenRefreshed: Subject<any> = new Subject();\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<any> {\n    // Handle the request\n\n    request = this.addAuthHeader(request);\n\n    // call next() and handle response\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        console.log(error);\n        const login_url = \"http://localhost:3000/users/login\";\n        const users_url = \"http://localhost:3000/users\";\n\n        if (error.status === 401){\n          // 401 so we are unauthorized\n\n          // refresh access token\n          return this.refreshAccessToken()\n          .pipe(\n            switchMap(() => {\n              request = this.addAuthHeader(request);\n              return next.handle(request);\n            }),\n            catchError((err: any) => {\n              console.log(err);\n              this.authService.logout();\n              return empty();\n            })\n          )\n        }\n\n        else if (error.url === login_url){\n            Swal.fire({\n              title: 'Error',\n              text: 'Please check your credentials',\n              icon: 'error',\n              backdrop: false\n          })\n        }\n\n        else if (error.url === users_url && error.status === 400){\n          if (error.error.code && error.error.code === 11000){\n            Swal.fire({\n              title: 'Error',\n              html: 'Email already registered. Please log in.',\n              icon: 'error',\n              backdrop: false\n          })\n          }\n          else{\n            Swal.fire({\n              title: 'Error',\n              html: '1. Email must be at least 1 character long <br>2. Password must be at least 8 characters long',\n              icon: 'error',\n              backdrop: false\n          })\n        }\n        }\n\n        return throwError(error);\n      })\n\n      \n    )\n  }\n\n refreshAccessToken(){\n    this.refreshingAccessToken = true;\n    // we want to call a method to send a request to refresh access token\n    return this.authService.getNewAccessToken().pipe(\n      tap(() => {\n        this.refreshingAccessToken = false;\n        console.log(\"Access Token Refreshed!\");\n      })\n    )\n  }\n\n  addAuthHeader(request: HttpRequest<any>){\n    // get access token\n    const token = this.authService.getAccessToken();\n\n    if (token) {\n          // append access token to req header\n          return request.clone({\n            setHeaders: {\n              'x-access-token': token\n            }\n          })\n    }\n    return request;\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}