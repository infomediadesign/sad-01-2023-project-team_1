{"ast":null,"code":"import { shareReplay, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web-request.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(webService, router, http) {\n    this.webService = webService;\n    this.router = router;\n    this.http = http;\n  }\n  login(email, password) {\n    return this.webService.login(email, password).pipe(shareReplay(), tap(res => {\n      // the auth tokens will be in the header of this response\n      this.setSession(email, res.body._id, res.headers.get('x-access-token'), res.headers.get('x-refresh-token'));\n      console.log(\"Logged in\");\n    }));\n  }\n  signup(email, password) {\n    return this.webService.signup(email, password).pipe(shareReplay(), tap(res => {\n      // the auth tokens will be in the header of this response\n      this.setSession(email, res.body._id, res.headers.get('x-access-token'), res.headers.get('x-refresh-token'));\n      console.log(\"Signed up\");\n    }));\n  }\n  changePw(email, password) {\n    let userId = this.getUserId();\n    return this.webService.changePw(email, password, userId).pipe(shareReplay(), tap(res => {\n      console.log(\"Password changed successfully\");\n    }));\n  }\n  logout() {\n    this.removeSession();\n    this.router.navigate(['/login']);\n  }\n  isLoggedIn() {\n    if (this.getAccessToken()) return true;else return false;\n  }\n  getAccessToken() {\n    return localStorage.getItem('x-access-token');\n  }\n  getRefreshToken() {\n    return localStorage.getItem('x-refresh-token');\n  }\n  getUserId() {\n    return localStorage.getItem('user-id');\n  }\n  getUserEmail() {\n    return localStorage.getItem('user-email');\n  }\n  setAccessToken(accessToken) {\n    localStorage.setItem('x-access-token', accessToken);\n  }\n  setSession(userEmail, userId, accessToken, refreshToken) {\n    localStorage.setItem('user-email', userEmail);\n    localStorage.setItem('user-id', userId);\n    localStorage.setItem('x-access-token', accessToken);\n    localStorage.setItem('x-refresh-token', refreshToken);\n  }\n  removeSession() {\n    localStorage.removeItem('user-email');\n    localStorage.removeItem('user-id');\n    localStorage.removeItem('x-access-token');\n    localStorage.removeItem('x-refresh-token');\n  }\n  getNewAccessToken() {\n    return this.http.get(`${this.webService.ROOT_URL}/users/me/access-token`, {\n      headers: {\n        'x-refresh-token': this.getRefreshToken(),\n        '_id': this.getUserId()\n      },\n      observe: 'response'\n    }).pipe(tap(res => {\n      this.setAccessToken(res.headers.get('x-access-token'));\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.WebRequestService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["shareReplay","tap","AuthService","constructor","webService","router","http","login","email","password","pipe","res","setSession","body","_id","headers","get","console","log","signup","changePw","userId","getUserId","logout","removeSession","navigate","isLoggedIn","getAccessToken","localStorage","getItem","getRefreshToken","getUserEmail","setAccessToken","accessToken","setItem","userEmail","refreshToken","removeItem","getNewAccessToken","ROOT_URL","observe","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ronga\\Documents\\GitHub\\sad-01-2023-project-team_1-1\\frontend\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { WebRequestService } from './web-request.service';\r\nimport { shareReplay, tap } from 'rxjs/operators';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(private webService: WebRequestService, private router: Router, private http: HttpClient) { }\r\n\r\n  login( email: string, password: string) {\r\n    return this.webService.login(email, password).pipe(\r\n      shareReplay(),\r\n      tap((res: HttpResponse<any>) => {\r\n        // the auth tokens will be in the header of this response\r\n        this.setSession(email, res.body._id, res.headers.get('x-access-token') as string, res.headers.get('x-refresh-token') as string);\r\n        console.log(\"Logged in\");\r\n      }\r\n    )\r\n    )\r\n  }\r\n  signup( email: string, password: string) {\r\n    return this.webService.signup(email, password).pipe(\r\n      shareReplay(),\r\n      tap((res: HttpResponse<any>) => {\r\n        // the auth tokens will be in the header of this response\r\n        this.setSession(email, res.body._id, res.headers.get('x-access-token') as string, res.headers.get('x-refresh-token') as string);\r\n        console.log(\"Signed up\");\r\n      }\r\n    )\r\n    )\r\n  }\r\n\r\n  changePw(email: string, password: string){\r\n    let userId = this.getUserId();\r\n    return this.webService.changePw(email, password, userId).pipe(\r\n      shareReplay(),\r\n      tap((res: HttpResponse<any>) => {\r\n        console.log(\"Password changed successfully\");\r\n      })\r\n    )\r\n  }\r\n\r\n  logout(){ \r\n    this.removeSession();\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  token: any;\r\n  isLoggedIn(): boolean {\r\n    if (this.getAccessToken()) return true;\r\n    else return false;\r\n  }\r\n\r\n  getAccessToken(){\r\n    return localStorage.getItem('x-access-token');\r\n  }\r\n\r\n  getRefreshToken(){\r\n    return localStorage.getItem('x-refresh-token') as string;\r\n  }\r\n\r\n  getUserId(){\r\n    return localStorage.getItem('user-id') as string;\r\n  }\r\n\r\n  getUserEmail(){\r\n    return localStorage.getItem('user-email');\r\n  }\r\n\r\n  setAccessToken(accessToken: string){\r\n    localStorage.setItem('x-access-token', accessToken);\r\n  }\r\n\r\n  private setSession(userEmail : string, userId: string, accessToken: string, refreshToken: string){\r\n    localStorage.setItem('user-email', userEmail);\r\n    localStorage.setItem('user-id', userId);\r\n    localStorage.setItem('x-access-token', accessToken);\r\n    localStorage.setItem('x-refresh-token', refreshToken);\r\n  }\r\n\r\n  private removeSession(){\r\n    localStorage.removeItem('user-email');\r\n    localStorage.removeItem('user-id');\r\n    localStorage.removeItem('x-access-token');\r\n    localStorage.removeItem('x-refresh-token');\r\n  }\r\n\r\n  getNewAccessToken() {\r\n    return this.http.get(`${this.webService.ROOT_URL}/users/me/access-token`, {\r\n      headers: {\r\n        'x-refresh-token': this.getRefreshToken(),\r\n        '_id': this.getUserId()\r\n      },\r\n      observe: 'response'\r\n    }).pipe(\r\n      tap((res: HttpResponse<any>) => {\r\n        this.setAccessToken(res.headers.get('x-access-token')!);\r\n      })\r\n    )\r\n  }\r\n\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}